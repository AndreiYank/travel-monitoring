#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –¥–ª—è GitHub Pages
"""

import pandas as pd
import json
from datetime import datetime
import os

def generate_interactive_dashboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML –¥–∞—à–±–æ—Ä–¥ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        df = pd.read_csv('data/travel_prices.csv')
        df['scraped_at'] = pd.to_datetime(df['scraped_at'])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_offers = len(df)
    unique_hotels = df['hotel_name'].nunique()
    avg_price = df['price'].mean()
    min_price = df['price'].min()
    max_price = df['price'].max()
    
    # –¢–æ–ø-15 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π
    top_cheap = df.nsmallest(15, 'price')
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    price_data = df.groupby('scraped_at')['price'].agg(['mean', 'min', 'max', 'count']).reset_index()
    price_data['scraped_at_str'] = price_data['scraped_at'].dt.strftime('%Y-%m-%d %H:%M')
    
    # –¢–æ–ø –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    hotel_counts = df['hotel_name'].value_counts().head(10)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
    price_bins = pd.cut(df['price'], bins=10)
    price_distribution = price_bins.value_counts().sort_index()
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
    price_distribution_str = {str(interval): count for interval, count in price_distribution.items()}
    
    # HTML —à–∞–±–ª–æ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    html_template = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Travel Price Monitor Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #2E86AB 0%, #A23B72 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        
        .header p {{
            margin: 10px 0 0 0;
            opacity: 0.9;
        }}
        
        .metrics {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 30px;
            background: #f8f9fa;
        }}
        
        .metric-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .metric-value {{
            font-size: 2em;
            font-weight: bold;
            color: #2E86AB;
            margin-bottom: 5px;
        }}
        
        .metric-label {{
            color: #666;
            font-size: 0.9em;
        }}
        
        .charts-section {{
            padding: 30px;
        }}
        
        .chart-container {{
            margin: 30px 0;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .chart-title {{
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #333;
            text-align: center;
        }}
        
        .table-container {{
            margin: 30px 0;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        
        th {{
            background-color: #f8f9fa;
            font-weight: 600;
        }}
        
        .price-low {{
            color: #28a745;
            font-weight: bold;
        }}
        
        .price-high {{
            color: #dc3545;
            font-weight: bold;
        }}
        
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
        }}
        
        @media (max-width: 768px) {{
            .container {{
                margin: 10px;
                border-radius: 10px;
            }}
            
            .header h1 {{
                font-size: 2em;
            }}
            
            .metrics {{
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                padding: 20px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè® Travel Price Monitor</h1>
            <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –¢—É—Ä—Ü–∏—é ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
        </div>
        
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">{total_offers:,}</div>
                <div class="metric-label">–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{unique_hotels}</div>
                <div class="metric-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{avg_price:.0f} PLN</div>
                <div class="metric-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{min_price:.0f} PLN</div>
                <div class="metric-label">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{max_price:.0f} PLN</div>
                <div class="metric-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</div>
            </div>
        </div>
        
        <div class="charts-section">
            <div class="chart-container">
                <div class="chart-title">üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏</div>
                <div id="price-timeline" style="height: 400px;"></div>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">üè® –¢–æ–ø-10 –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                <div id="hotel-counts" style="height: 400px;"></div>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω</div>
                <div id="price-distribution" style="height: 400px;"></div>
            </div>
        </div>
        
        <div class="table-container">
            <h2>üèÜ –¢–æ–ø-15 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π</h2>
            <table>
                <thead>
                    <tr>
                        <th>–û—Ç–µ–ª—å</th>
                        <th>–†–µ–π—Ç–∏–Ω–≥</th>
                        <th>–¶–µ–Ω–∞</th>
                        <th>–î–∞—Ç—ã</th>
                        <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                    </tr>
                </thead>
                <tbody>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for _, row in top_cheap.iterrows():
        html_template += f"""
                    <tr>
                        <td>{row['hotel_name']}</td>
                        <td>{row['rating'] if pd.notna(row['rating']) else 'N/A'}</td>
                        <td class="price-low">{row['price']:.0f} PLN</td>
                        <td>{row['dates'] if pd.notna(row['dates']) else 'N/A'}</td>
                        <td>{row['duration'] if pd.notna(row['duration']) else 'N/A'}</td>
                    </tr>
"""

    # –ó–∞–≤–µ—Ä—à–∞–µ–º HTML
    html_template += """
                </tbody>
            </table>
        </div>
        
        <div class="footer">
            <p>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å ‚Ä¢ Powered by GitHub Actions</p>
        </div>
    </div>

    <script>
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const priceData = """ + json.dumps({
            'timeline': price_data[['scraped_at_str', 'mean', 'min', 'max']].to_dict('records'),
            'hotel_counts': hotel_counts.to_dict(),
            'price_distribution': price_distribution_str
        }) + """;

        // –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω
        const timelineTrace = {
            x: priceData.timeline.map(d => d.scraped_at_str),
            y: priceData.timeline.map(d => d.mean),
            type: 'scatter',
            mode: 'lines+markers',
            name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
            line: {color: '#2E86AB', width: 3},
            marker: {size: 8}
        };

        const minTrace = {
            x: priceData.timeline.map(d => d.scraped_at_str),
            y: priceData.timeline.map(d => d.min),
            type: 'scatter',
            mode: 'lines+markers',
            name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
            line: {color: '#28a745', width: 2},
            marker: {size: 6}
        };

        const maxTrace = {
            x: priceData.timeline.map(d => d.scraped_at_str),
            y: priceData.timeline.map(d => d.max),
            type: 'scatter',
            mode: 'lines+markers',
            name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
            line: {color: '#dc3545', width: 2},
            marker: {size: 6}
        };

        Plotly.newPlot('price-timeline', [timelineTrace, minTrace, maxTrace], {
            title: '–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            xaxis: {title: '–í—Ä–µ–º—è'},
            yaxis: {title: '–¶–µ–Ω–∞ (PLN)'},
            hovermode: 'closest'
        });

        // –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –æ—Ç–µ–ª–µ–π
        const hotelData = {
            x: Object.values(priceData.hotel_counts),
            y: Object.keys(priceData.hotel_counts),
            type: 'bar',
            orientation: 'h',
            marker: {color: '#A23B72'}
        };

        Plotly.newPlot('hotel-counts', [hotelData], {
            title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ—Ç–µ–ª—è–º',
            xaxis: {title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'},
            yaxis: {title: '–û—Ç–µ–ª—å'}
        });

        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
        const distributionData = {
            x: Object.keys(priceData.price_distribution),
            y: Object.values(priceData.price_distribution),
            type: 'bar',
            marker: {color: '#667eea'}
        };

        Plotly.newPlot('price-distribution', [distributionData], {
            title: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω',
            xaxis: {title: '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (PLN)'},
            yaxis: {title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'}
        });
    </script>
</body>
</html>
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open('index.html', 'w', encoding='utf-8') as f:
        f.write(html_template)
    
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: index.html")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_offers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {unique_hotels} –æ—Ç–µ–ª–µ–π")
    print(f"üí∞ –¶–µ–Ω—ã: {min_price:.0f} - {max_price:.0f} PLN (—Å—Ä–µ–¥–Ω—è—è: {avg_price:.0f} PLN)")

if __name__ == "__main__":
    generate_interactive_dashboard()
