#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –∏–∑ –í–∞—Ä—à–∞–≤—ã –∏ –∏–∑ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤, –∑–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from typing import List, Dict, Any, Optional
import logging
from travel_monitor import TravelPriceMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('monitor_with_airport_comparison.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class TravelMonitorWithAirportComparison:
    def __init__(self, base_config_file: str, any_airports_config_file: str):
        self.base_config_file = base_config_file
        self.any_airports_config_file = any_airports_config_file
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.base_config = self.load_config(base_config_file)
        self.any_airports_config = self.load_config(any_airports_config_file)
        
    def load_config(self, config_file: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_file}")
            return config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}: {e}")
            sys.exit(1)
    
    async def run_monitoring_with_comparison(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤...")
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –í–∞—Ä—à–∞–≤—ã
            logger.info("üìç –≠—Ç–∞–ø 1: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –í–∞—Ä—à–∞–≤—ã...")
            warsaw_monitor = TravelPriceMonitor(self.base_config_file)
            warsaw_success = await warsaw_monitor.run_monitoring()
            
            if not warsaw_success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∏–∑ –í–∞—Ä—à–∞–≤—ã")
                return False
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            logger.info("üåç –≠—Ç–∞–ø 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤...")
            any_airports_monitor = TravelPriceMonitor(self.any_airports_config_file)
            any_airports_success = await any_airports_monitor.run_monitoring()
            
            if not any_airports_success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∏–∑ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤")
                return False
            
            # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("üîÑ –≠—Ç–∞–ø 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            warsaw_monitor.compare_airports(self.any_airports_config_file)
            
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    parser = argparse.ArgumentParser(description="Travel price monitor with airport comparison")
    parser.add_argument("--base-config", default="config.json", help="–ü—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–í–∞—Ä—à–∞–≤–∞)")
    parser.add_argument("--any-airports-config", default="config_any_airports.json", help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤")
    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.path.exists(args.base_config):
        logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.base_config}")
        sys.exit(1)
    
    if not os.path.exists(args.any_airports_config):
        logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.any_airports_config}")
        sys.exit(1)
    
    monitor = TravelMonitorWithAirportComparison(args.base_config, args.any_airports_config)
    
    try:
        success = asyncio.run(monitor.run_monitoring_with_comparison())
        if success:
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
