#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ API fly.pl –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime
from typing import Dict, List, Any
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FlyPlAPIResearch:
    def __init__(self):
        self.base_url = "https://fly.pl"
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def research_api_endpoints(self):
        """–ò—Å—Å–ª–µ–¥—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints fly.pl"""
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ API endpoints –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        potential_endpoints = [
            "/api/search/offers",
            "/api/offers",
            "/api/travel/search", 
            "/api/search",
            "/api/v1/search",
            "/api/v2/search",
            "/search/api",
            "/offers/api",
            "/travel/api",
            "/api/offers/search",
            "/api/travel/offers",
            "/api/search/travel",
            "/api/booking/search",
            "/api/tours/search"
        ]
        
        logger.info("üîç –ò—Å—Å–ª–µ–¥—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints...")
        
        results = {}
        
        for endpoint in potential_endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                # –ü—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å
                async with self.session.get(url, timeout=10) as response:
                    if response.status == 200:
                        content_type = response.headers.get('content-type', '')
                        if 'json' in content_type:
                            data = await response.json()
                            results[endpoint] = {
                                'status': response.status,
                                'content_type': content_type,
                                'data_preview': str(data)[:200] + "..." if len(str(data)) > 200 else str(data)
                            }
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω API endpoint: {endpoint}")
                        else:
                            results[endpoint] = {
                                'status': response.status,
                                'content_type': content_type,
                                'note': 'Not JSON response'
                            }
                    else:
                        results[endpoint] = {
                            'status': response.status,
                            'note': 'Not found or error'
                        }
                        
            except Exception as e:
                results[endpoint] = {
                    'error': str(e)
                }
        
        return results
    
    async def test_search_with_params(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ URL"""
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        search_params = {
            "filter[dest]": "14:",
            "filter[cityids]": "0", 
            "filter[whenFrom]": "20-09-2025",
            "filter[whenTo]": "04-10-2025",
            "filter[duration]": "6:15",
            "filter[from]": "Warszawa,Warszawa-Radom",
            "filter[person]": "2",
            "filter[child]": "1",
            "filter[price]": "0",
            "filter[PriceFrom]": "0",
            "filter[PriceTo]": "8100",
            "filter[addCategory]": "40",
            "filter[addCatering]": "1",
            "filter[addMisc]": "0",
            "filter[addTransport]": "F",
            "filter[fp]": "1",
            "order_by": "ofr_price",
            "filter[tourOperator]": "0",
            "filter[childAge][1]": "20201210"
        }
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ API endpoints –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
        post_endpoints = [
            "/api/search",
            "/api/search/offers", 
            "/api/travel/search",
            "/api/offers/search",
            "/search/api",
            "/api/v1/search"
        ]
        
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞...")
        
        results = {}
        
        for endpoint in post_endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                # –ü—Ä–æ–±—É–µ–º POST —Å JSON
                async with self.session.post(
                    url, 
                    json=search_params,
                    headers={'Content-Type': 'application/json'},
                    timeout=15
                ) as response:
                    results[endpoint] = {
                        'method': 'POST JSON',
                        'status': response.status,
                        'content_type': response.headers.get('content-type', ''),
                        'content_length': response.headers.get('content-length', 'unknown')
                    }
                    
                    if response.status == 200:
                        try:
                            data = await response.json()
                            results[endpoint]['data_preview'] = str(data)[:300] + "..." if len(str(data)) > 300 else str(data)
                            logger.info(f"‚úÖ POST JSON —É—Å–ø–µ—à–µ–Ω: {endpoint}")
                        except:
                            text = await response.text()
                            results[endpoint]['text_preview'] = text[:300] + "..." if len(text) > 300 else text
                            
            except Exception as e:
                results[endpoint] = {
                    'method': 'POST JSON',
                    'error': str(e)
                }
        
        return results
    
    async def analyze_network_requests(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞
        search_url = "https://fly.pl/kierunek/turcja/"
        
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        
        try:
            async with self.session.get(search_url, timeout=10) as response:
                if response.status == 200:
                    html = await response.text()
                    
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è API –≤ HTML
                    api_mentions = []
                    lines = html.split('\n')
                    for i, line in enumerate(lines):
                        if 'api' in line.lower() and ('search' in line.lower() or 'offer' in line.lower()):
                            api_mentions.append({
                                'line': i + 1,
                                'content': line.strip()[:200]
                            })
                    
                    return {
                        'status': response.status,
                        'api_mentions': api_mentions[:10],  # –ü–µ—Ä–≤—ã–µ 10 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
                        'total_lines': len(lines)
                    }
                    
        except Exception as e:
            return {'error': str(e)}
    
    async def test_ajax_requests(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ AJAX –∑–∞–ø—Ä–æ—Å—ã"""
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'pl-PL,pl;q=0.9,en;q=0.8',
            'Referer': 'https://fly.pl/kierunek/turcja/',
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ AJAX endpoints
        ajax_endpoints = [
            "/ajax/search",
            "/ajax/offers",
            "/ajax/travel/search",
            "/search/ajax",
            "/offers/ajax",
            "/api/ajax/search",
            "/api/ajax/offers"
        ]
        
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º AJAX endpoints...")
        
        results = {}
        
        for endpoint in ajax_endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                async with self.session.get(url, headers=headers, timeout=10) as response:
                    results[endpoint] = {
                        'status': response.status,
                        'content_type': response.headers.get('content-type', ''),
                        'headers': dict(response.headers)
                    }
                    
                    if response.status == 200:
                        try:
                            data = await response.json()
                            results[endpoint]['data_preview'] = str(data)[:200] + "..." if len(str(data)) > 200 else str(data)
                            logger.info(f"‚úÖ AJAX endpoint –Ω–∞–π–¥–µ–Ω: {endpoint}")
                        except:
                            text = await response.text()
                            results[endpoint]['text_preview'] = text[:200] + "..." if len(text) > 200 else text
                            
            except Exception as e:
                results[endpoint] = {'error': str(e)}
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ API fly.pl...")
    start_time = time.time()
    
    async with FlyPlAPIResearch() as researcher:
        # 1. –ò—Å—Å–ª–µ–¥—É–µ–º API endpoints
        logger.info("\n=== 1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ API endpoints ===")
        api_results = await researcher.research_api_endpoints()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        logger.info("\n=== 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===")
        search_results = await researcher.test_search_with_params()
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        logger.info("\n=== 3. –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===")
        network_results = await researcher.analyze_network_requests()
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã
        logger.info("\n=== 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AJAX endpoints ===")
        ajax_results = await researcher.test_ajax_requests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = {
            'timestamp': datetime.now().isoformat(),
            'api_endpoints': api_results,
            'search_tests': search_results,
            'network_analysis': network_results,
            'ajax_tests': ajax_results
        }
        
        with open('api_research_results.json', 'w', encoding='utf-8') as f:
            json.dump(all_results, f, indent=2, ensure_ascii=False)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*50)
        logger.info("üìä –û–¢–ß–ï–¢ –û–ë –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ò API")
        logger.info("="*50)
        
        successful_apis = [k for k, v in api_results.items() if v.get('status') == 200]
        successful_searches = [k for k, v in search_results.items() if v.get('status') == 200]
        successful_ajax = [k for k, v in ajax_results.items() if v.get('status') == 200]
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ API endpoints: {len(successful_apis)}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(successful_searches)}")
        logger.info(f"‚úÖ AJAX endpoints: {len(successful_ajax)}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {time.time() - start_time:.2f} —Å–µ–∫")
        logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: api_research_results.json")
        
        if successful_apis:
            logger.info(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints:")
            for endpoint in successful_apis:
                logger.info(f"   - {endpoint}")
        
        if successful_searches:
            logger.info(f"\nüéØ –†–∞–±–æ—á–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ endpoints:")
            for endpoint in successful_searches:
                logger.info(f"   - {endpoint}")
        
        if successful_ajax:
            logger.info(f"\nüéØ AJAX endpoints:")
            for endpoint in successful_ajax:
                logger.info(f"   - {endpoint}")

if __name__ == "__main__":
    asyncio.run(main())
