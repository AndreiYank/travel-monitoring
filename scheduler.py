#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import schedule
import time
import subprocess
import logging
import csv
from datetime import datetime
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ScheduledMonitor:
    def __init__(self, config_file="scheduler_config.json"):
        self.config_file = config_file
        self.config = self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        default_config = {
            "enabled": True,
            "intervals": {
                "daily": "09:00",
                "hourly": False,
                "custom_hours": [9, 15, 21]
            },
            "notifications": {
                "enabled": False,
                "telegram_bot_token": "",
                "telegram_chat_id": ""
            },
            "data_retention_days": 30,
            "min_price_change_threshold": 100
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
                return {**default_config, **config}
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ {self.config_file}")
        return default_config
    
    def run_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(['python', 'travel_monitor.py'], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
                self.check_price_changes()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
                if self.config['notifications']['enabled']:
                    self.send_notification("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result.stderr}")
                if self.config['notifications']['enabled']:
                    self.send_notification(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result.stderr}")
                    
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def check_price_changes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"""
        try:
            import pandas as pd
            
            data_file = "data/travel_prices.csv"
            if not os.path.exists(data_file):
                return
            
            df = pd.read_csv(data_file, quoting=csv.QUOTE_ALL, on_bad_lines='skip')
            df['scraped_at'] = pd.to_datetime(df['scraped_at'])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest_data = df[df['scraped_at'] == df['scraped_at'].max()]
            previous_data = df[df['scraped_at'] < df['scraped_at'].max()]
            
            if previous_data.empty:
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            significant_changes = []
            threshold = self.config['min_price_change_threshold']
            
            for hotel in latest_data['hotel_name'].unique():
                latest_price = latest_data[latest_data['hotel_name'] == hotel]['price'].iloc[0]
                previous_prices = previous_data[previous_data['hotel_name'] == hotel]['price']
                
                if not previous_prices.empty:
                    previous_price = previous_prices.iloc[-1]
                    change = latest_price - previous_price
                    
                    if abs(change) >= threshold:
                        significant_changes.append({
                            'hotel': hotel,
                            'previous_price': previous_price,
                            'current_price': latest_price,
                            'change': change,
                            'change_pct': (change / previous_price) * 100
                        })
            
            if significant_changes:
                self.report_price_changes(significant_changes)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {e}")
    
    def report_price_changes(self, changes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
        message = "üìä –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù:\n\n"
        
        for change in changes[:10]:  # –¢–æ–ø-10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
            direction = "üìà" if change['change'] > 0 else "üìâ"
            message += f"{direction} {change['hotel'][:40]}\n"
            message += f"   {change['previous_price']:.0f} PLN ‚Üí {change['current_price']:.0f} PLN "
            message += f"({change['change']:+.0f} PLN, {change['change_pct']:+.1f}%)\n\n"
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(changes)} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω")
        
        if self.config['notifications']['enabled']:
            self.send_notification(message)
    
    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if self.config['notifications']['telegram_bot_token']:
                self.send_telegram_message(message)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def send_telegram_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            import requests
            
            bot_token = self.config['notifications']['telegram_bot_token']
            chat_id = self.config['notifications']['telegram_chat_id']
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.text}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if not self.config['enabled']:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
        if self.config['intervals']['daily']:
            schedule.every().day.at(self.config['intervals']['daily']).do(self.run_monitoring)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ {self.config['intervals']['daily']}")
        
        # –ü–æ—á–∞—Å–æ–≤–æ–π –∑–∞–ø—É—Å–∫
        if self.config['intervals']['hourly']:
            schedule.every().hour.do(self.run_monitoring)
            logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ—á–∞—Å–æ–≤–æ–π –∑–∞–ø—É—Å–∫")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —á–∞—Å—ã
        if self.config['intervals']['custom_hours']:
            for hour in self.config['intervals']['custom_hours']:
                schedule.every().day.at(f"{hour:02d}:00").do(self.run_monitoring)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—É—Å–∫ –≤ —á–∞—Å—ã: {self.config['intervals']['custom_hours']}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("üïê –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        self.setup_schedule()
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except KeyboardInterrupt:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

def main():
    monitor = ScheduledMonitor()
    monitor.run_scheduler()

if __name__ == "__main__":
    main()

