#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import argparse
import os
import json

class TravelDataAnalyzer:
    def __init__(self, data_file="data/travel_prices.csv"):
        self.data_file = data_file
        self.df = self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.data_file):
            print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.data_file}")
            return pd.DataFrame()
        
        try:
            df = pd.read_csv(self.data_file)
            df['scraped_at'] = pd.to_datetime(df['scraped_at'])
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {self.data_file}")
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def basic_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print("\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(self.df)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π: {self.df['hotel_name'].nunique()}")
        print(f"–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {self.df['scraped_at'].min().strftime('%Y-%m-%d')} - {self.df['scraped_at'].max().strftime('%Y-%m-%d')}")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {self.df['price'].mean():.2f} PLN")
        print(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {self.df['price'].median():.2f} PLN")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {self.df['price'].min():.2f} PLN")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {self.df['price'].max():.2f} PLN")
        print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {self.df['price'].std():.2f} PLN")
    
    def top_offers(self, n=10, cheapest=True):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        if self.df.empty:
            return
        
        print(f"\nüèÜ –¢–û–ü-{n} {'–°–ê–ú–´–• –î–ï–®–ï–í–´–•' if cheapest else '–°–ê–ú–´–• –î–û–†–û–ì–ò–•'} –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô")
        print("=" * 70)
        
        if cheapest:
            top_offers = self.df.nsmallest(n, 'price')
        else:
            top_offers = self.df.nlargest(n, 'price')
        
        for i, (_, row) in enumerate(top_offers.iterrows(), 1):
            print(f"{i:2d}. {row['hotel_name'][:50]:<50} | {row['price']:>8.0f} PLN")
            if row['dates']:
                print(f"    üìÖ {row['dates']}")
            if row['duration']:
                print(f"    ‚è±Ô∏è  {row['duration']}")
            if row['rating']:
                print(f"    ‚≠ê {row['rating']}")
            print(f"    üìä –°–æ–±—Ä–∞–Ω–æ: {row['scraped_at'].strftime('%Y-%m-%d %H:%M')}")
            print()
    
    def price_trends(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã —Ü–µ–Ω"""
        if self.df.empty:
            return
        
        print("\nüìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –¶–ï–ù")
        print("=" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_stats = self.df.groupby(self.df['scraped_at'].dt.date).agg({
            'price': ['mean', 'min', 'max', 'count']
        }).round(2)
        
        daily_stats.columns = ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–ú–∏–Ω —Ü–µ–Ω–∞', '–ú–∞–∫—Å —Ü–µ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        print(daily_stats)
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è
        print("\nüè® –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù –ü–û –û–¢–ï–õ–Ø–ú (—Ç–æ–ø-10):")
        print("-" * 60)
        
        hotel_changes = []
        for hotel in self.df['hotel_name'].unique():
            hotel_data = self.df[self.df['hotel_name'] == hotel].sort_values('scraped_at')
            if len(hotel_data) > 1:
                first_price = hotel_data.iloc[0]['price']
                last_price = hotel_data.iloc[-1]['price']
                change = last_price - first_price
                change_pct = (change / first_price) * 100 if first_price > 0 else 0
                
                hotel_changes.append({
                    'hotel': hotel,
                    'first_price': first_price,
                    'last_price': last_price,
                    'change': change,
                    'change_pct': change_pct,
                    'records': len(hotel_data)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        hotel_changes.sort(key=lambda x: x['records'], reverse=True)
        
        for i, hotel in enumerate(hotel_changes[:10], 1):
            print(f"{i:2d}. {hotel['hotel'][:40]:<40} | {hotel['change']:+.0f} PLN ({hotel['change_pct']:+.1f}%) | {hotel['records']} –∑–∞–ø–∏—Å–µ–π")
    
    def create_advanced_charts(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
        if self.df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts_dir = "data/advanced_charts"
        os.makedirs(charts_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('default')
        
        # 1. –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Ç—Ä–µ–Ω–¥–æ–º
        plt.figure(figsize=(15, 8))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_prices = self.df.groupby(self.df['scraped_at'].dt.date)['price'].agg(['mean', 'min', 'max'])
        
        plt.plot(daily_prices.index, daily_prices['mean'], marker='o', linewidth=2, label='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞')
        plt.fill_between(daily_prices.index, daily_prices['min'], daily_prices['max'], alpha=0.3, label='–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω')
        
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', fontsize=16, fontweight='bold')
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–¶–µ–Ω–∞ (PLN)', fontsize=12)
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        plt.savefig(f"{charts_dir}/price_dynamics.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # 2. Box plot —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
        plt.figure(figsize=(12, 8))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è box plot
        daily_data = []
        daily_labels = []
        for date in daily_prices.index:
            day_prices = self.df[self.df['scraped_at'].dt.date == date]['price']
            if len(day_prices) > 0:
                daily_data.append(day_prices)
                daily_labels.append(date.strftime('%m-%d'))
        
        if daily_data:
            plt.boxplot(daily_data, labels=daily_labels)
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –¥–Ω—è–º', fontsize=16, fontweight='bold')
            plt.xlabel('–î–∞—Ç–∞', fontsize=12)
            plt.ylabel('–¶–µ–Ω–∞ (PLN)', fontsize=12)
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            plt.savefig(f"{charts_dir}/price_distribution_by_day.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        # 3. –¢–æ–ø-20 –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        plt.figure(figsize=(15, 10))
        
        hotel_counts = self.df['hotel_name'].value_counts().head(20)
        
        bars = plt.barh(range(len(hotel_counts)), hotel_counts.values)
        plt.yticks(range(len(hotel_counts)), 
                  [name[:40] + '...' if len(name) > 40 else name for name in hotel_counts.index])
        
        plt.title('–¢–æ–ø-20 –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', fontsize=16, fontweight='bold')
        plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', fontsize=12)
        plt.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (bar, count) in enumerate(zip(bars, hotel_counts.values)):
            plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2, 
                    str(count), ha='left', va='center')
        
        plt.tight_layout()
        plt.savefig(f"{charts_dir}/top_hotels_by_offers.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {charts_dir}/")
    
    def export_summary(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –≤ JSON"""
        if self.df.empty:
            return
        
        summary = {
            "analysis_date": datetime.now().isoformat(),
            "total_offers": len(self.df),
            "unique_hotels": self.df['hotel_name'].nunique(),
            "date_range": {
                "start": self.df['scraped_at'].min().isoformat(),
                "end": self.df['scraped_at'].max().isoformat()
            },
            "price_stats": {
                "mean": float(self.df['price'].mean()),
                "median": float(self.df['price'].median()),
                "min": float(self.df['price'].min()),
                "max": float(self.df['price'].max()),
                "std": float(self.df['price'].std())
            },
            "top_cheap_offers": self.df.nsmallest(5, 'price')[['hotel_name', 'price', 'dates']].to_dict('records')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("data/analysis_summary.json", 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –°–≤–æ–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ data/analysis_summary.json")

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')
    parser.add_argument('--data-file', default='data/travel_prices.csv', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏')
    parser.add_argument('--charts', action='store_true', 
                       help='–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏')
    parser.add_argument('--export', action='store_true', 
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –≤ JSON')
    
    args = parser.parse_args()
    
    analyzer = TravelDataAnalyzer(args.data_file)
    
    if analyzer.df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    analyzer.basic_stats()
    analyzer.top_offers(10, cheapest=True)
    analyzer.price_trends()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if args.charts:
        analyzer.create_advanced_charts()
    
    if args.export:
        analyzer.export_summary()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
