#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
"""

import pandas as pd
import json
import os
import csv
from datetime import datetime
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class AirportComparison:
    def __init__(self, data_dir: str = "data"):
        self.data_dir = data_dir
        
    def load_data(self, data_file: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        filepath = os.path.join(self.data_dir, data_file)
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑: {filepath}")
        logger.info(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(filepath)}")
        
        if not os.path.exists(filepath):
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return pd.DataFrame()
        
        try:
            df = pd.read_csv(filepath, quoting=csv.QUOTE_ALL, on_bad_lines='skip')
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {filepath}")
            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {filepath}: {e}")
            return pd.DataFrame()
    
    def extract_airport_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –∏–∑ URL"""
        try:
            if 'filter[from]=' in url:
                # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä filter[from] –≤ URL
                import re
                match = re.search(r'filter\[from\]=([^&]*)', url)
                if match:
                    airports = match.group(1)
                    if airports:
                        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                        return airports.split(',')[0]
            return "–í—Å–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏–∑ URL: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def compare_airports(self, warsaw_data_file: str, any_airports_data_file: str) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–∞—Ä—à–∞–≤—ã –∏ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        warsaw_df = self.load_data(warsaw_data_file)
        any_airports_df = self.load_data(any_airports_data_file)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –í–∞—Ä—à–∞–≤—ã: {len(warsaw_df)} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {len(any_airports_df)} –∑–∞–ø–∏—Å–µ–π")
        
        if warsaw_df.empty or any_airports_df.empty:
            logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–µ
        warsaw_df['departure_airport'] = 'Warszawa'
        any_airports_df['departure_airport'] = any_airports_df['url'].apply(self.extract_airport_from_url)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–µ–ª–∏ –¥–æ 8000 PLN, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ª—é–±—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö, –Ω–æ –Ω–µ—Ç –≤ –í–∞—Ä—à–∞–≤–µ
        warsaw_hotels = set(warsaw_df['hotel_name'].unique())
        any_airports_hotels = set(any_airports_df['hotel_name'].unique())
        
        # –û—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ª—é–±—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö, –Ω–æ –Ω–µ—Ç –≤ –í–∞—Ä—à–∞–≤–µ
        missing_in_warsaw = any_airports_hotels - warsaw_hotels
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –¥–æ 8000 PLN
        missing_under_8000 = any_airports_df[
            (any_airports_df['hotel_name'].isin(missing_in_warsaw)) & 
            (any_airports_df['price'] <= 8000)
        ].copy()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–µ–ª—è–º –∏ –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        missing_under_8000 = missing_under_8000.loc[missing_under_8000.groupby('hotel_name')['price'].idxmin()]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        missing_under_8000 = missing_under_8000.sort_values('price')
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö, –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
        common_hotels = warsaw_hotels & any_airports_hotels
        
        comparison_results = []
        
        for hotel in common_hotels:
            warsaw_hotel = warsaw_df[warsaw_df['hotel_name'] == hotel]
            any_airports_hotel = any_airports_df[any_airports_df['hotel_name'] == hotel]
            
            if warsaw_hotel.empty or any_airports_hotel.empty:
                continue
            
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            warsaw_min_price = warsaw_hotel['price'].min()
            any_airports_min_price = any_airports_hotel['price'].min()
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ª—é–±—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            best_any_airports = any_airports_hotel.loc[any_airports_hotel['price'].idxmin()]
            
            if any_airports_min_price < warsaw_min_price:
                comparison_results.append({
                    'hotel_name': hotel,
                    'warsaw_price': warsaw_min_price,
                    'best_other_price': any_airports_min_price,
                    'savings': warsaw_min_price - any_airports_min_price,
                    'savings_percent': ((warsaw_min_price - any_airports_min_price) / warsaw_min_price) * 100,
                    'best_departure_airport': best_any_airports['departure_airport'],
                    'best_offer_url': best_any_airports.get('offer_url', ''),
                    'best_dates': best_any_airports.get('dates', ''),
                    'best_duration': best_any_airports.get('duration', '')
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
        comparison_results.sort(key=lambda x: x['savings'], reverse=True)
        
        result = {
            'missing_in_warsaw_under_8000': missing_under_8000.to_dict('records'),
            'cheaper_alternatives': comparison_results,
            'comparison_date': datetime.now().isoformat(),
            'warsaw_hotels_count': len(warsaw_hotels),
            'any_airports_hotels_count': len(any_airports_hotels),
            'missing_in_warsaw_count': len(missing_in_warsaw),
            'cheaper_alternatives_count': len(comparison_results)
        }
        
        logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   - –û—Ç–µ–ª–µ–π –≤ –í–∞—Ä—à–∞–≤–µ: {result['warsaw_hotels_count']}")
        logger.info(f"   - –û—Ç–µ–ª–µ–π –≤ –ª—é–±—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö: {result['any_airports_hotels_count']}")
        logger.info(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –í–∞—Ä—à–∞–≤–µ (–¥–æ 8000 PLN): {result['missing_in_warsaw_count']}")
        logger.info(f"   - –î–µ—à–µ–≤–ª–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {result['cheaper_alternatives_count']}")
        
        return result
    
    def save_comparison_results(self, results: Dict[str, Any], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª"""
        filepath = os.path.join(self.data_dir, output_file)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def create_comparison_report(self, results: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"""
        if not results:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"
        
        report = []
        report.append("üõ´ –û–¢–ß–ï–¢ –û –°–†–ê–í–ù–ï–ù–ò–ò –ê–≠–†–û–ü–û–†–¢–û–í")
        report.append("=" * 50)
        report.append(f"–î–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {results['comparison_date'][:19]}")
        report.append(f"–û—Ç–µ–ª–µ–π –≤ –í–∞—Ä—à–∞–≤–µ: {results['warsaw_hotels_count']}")
        report.append(f"–û—Ç–µ–ª–µ–π –≤ –ª—é–±—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö: {results['any_airports_hotels_count']}")
        report.append("")
        
        # –û—Ç–µ–ª–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –í–∞—Ä—à–∞–≤–µ
        missing_hotels = results['missing_in_warsaw_under_8000']
        if missing_hotels:
            report.append("üè® –û–¢–ï–õ–ò –î–û 8000 PLN, –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í –í–ê–†–®–ê–í–ï:")
            report.append("-" * 50)
            for i, hotel in enumerate(missing_hotels[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
                report.append(f"{i:2d}. {hotel['hotel_name'][:50]:<50} | {hotel['price']:>8.0f} PLN")
                if hotel.get('departure_airport'):
                    report.append(f"    –ê—ç—Ä–æ–ø–æ—Ä—Ç: {hotel['departure_airport']}")
                report.append("")
        else:
            report.append("üè® –û—Ç–µ–ª–∏ –¥–æ 8000 PLN, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –í–∞—Ä—à–∞–≤–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            report.append("")
        
        # –î–µ—à–µ–≤–ª–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
        cheaper_alternatives = results['cheaper_alternatives']
        if cheaper_alternatives:
            report.append("üí∞ –î–ï–®–ï–í–õ–ï –ò–ó –î–†–£–ì–ò–• –ê–≠–†–û–ü–û–†–¢–û–í:")
            report.append("-" * 50)
            for i, alt in enumerate(cheaper_alternatives[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
                report.append(f"{i:2d}. {alt['hotel_name'][:40]:<40}")
                report.append(f"    –í–∞—Ä—à–∞–≤–∞: {alt['warsaw_price']:>8.0f} PLN | {alt['best_departure_airport']}: {alt['best_other_price']:>8.0f} PLN")
                report.append(f"    –≠–∫–æ–Ω–æ–º–∏—è: {alt['savings']:>8.0f} PLN ({alt['savings_percent']:>5.1f}%)")
                if alt.get('best_dates'):
                    report.append(f"    –î–∞—Ç—ã: {alt['best_dates']}")
                report.append("")
        else:
            report.append("üí∞ –î–µ—à–µ–≤–ª–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            report.append("")
        
        return "\n".join(report)
    
    def save_comparison_report(self, results: Dict[str, Any], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏"""
        report = self.create_comparison_report(results)
        filepath = os.path.join(self.data_dir, output_file)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(report)
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    comparison = AirportComparison()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    results = comparison.compare_airports(
        "travel_prices.csv",
        "travel_prices_any_airports.csv"
    )
    
    if results:
        comparison.save_comparison_results(results, "airport_comparison_results.json")
        comparison.save_comparison_report(results, "airport_comparison_report.txt")
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
