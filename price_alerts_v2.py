#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–≤–µ—Ä—Å–∏—è 2)
–°–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–¥–Ω–æ–º–æ–º–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –±–æ–ª—å—à–µ 4%
- –ö–∞–∂–¥—ã–π —Ä–∞–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
- –ù–∞ –¥–∞—à–±–æ—Ä–¥ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
"""

import pandas as pd
import json
import os
import csv
from datetime import datetime, timezone
from typing import List, Dict, Any, Set
import logging

logger = logging.getLogger(__name__)

class PriceAlertManagerV2:
    def __init__(self, data_file="data/travel_prices.csv", alerts_file="data/price_alerts_history.json"):
        self.data_file = data_file
        self.alerts_file = alerts_file
        self.df = self.load_data()
        
    def load_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.data_file):
            return pd.DataFrame()
        
        try:
            df = pd.read_csv(self.data_file, quoting=csv.QUOTE_ALL, on_bad_lines='skip')
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º format='ISO8601' –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            df['scraped_at'] = pd.to_datetime(df['scraped_at'], errors='coerce', utc=True, format='ISO8601')
            df = df.dropna(subset=['scraped_at'])
            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def load_alerts(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–ª–µ—Ä—Ç–æ–≤"""
        if not os.path.exists(self.alerts_file):
            return []
        
        try:
            with open(self.alerts_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, dict) and 'alerts' in data:
                    return data['alerts']
                elif isinstance(data, list):
                    return data
                else:
                    return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def save_alerts(self, alerts: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.alerts_file, 'w', encoding='utf-8') as f:
                json.dump(alerts, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def get_run_times(self) -> List[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —Ä–∞–Ω–æ–≤ (–ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º > 5 –º–∏–Ω—É—Ç)"""
        if self.df.empty:
            return []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –¥–∞—à–±–æ—Ä–¥–∞—Ö - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º > 5 –º–∏–Ω—É—Ç
        df_sorted = self.df.sort_values('scraped_at')
        df_sorted['time_diff'] = df_sorted['scraped_at'].diff()
        run_boundaries = df_sorted[df_sorted['time_diff'] > pd.Timedelta(minutes=5)].index.tolist()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        run_starts = [0] + run_boundaries
        run_ends = run_boundaries + [len(df_sorted)]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–∞
        run_times = []
        for start_idx, end_idx in zip(run_starts, run_ends):
            run_data_slice = df_sorted.iloc[start_idx:end_idx]
            if len(run_data_slice) > 0:
                run_time = run_data_slice['scraped_at'].iloc[0]
                run_times.append(run_time)
        
        return sorted(run_times)
    
    def get_hotel_prices_for_run(self, run_time: datetime) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –≤—Å–µ—Ö –æ—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–Ω–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
        df_sorted = self.df.sort_values('scraped_at')
        df_sorted['time_diff'] = df_sorted['scraped_at'].diff()
        run_boundaries = df_sorted[df_sorted['time_diff'] > pd.Timedelta(minutes=5)].index.tolist()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        run_starts = [0] + run_boundaries
        run_ends = run_boundaries + [len(df_sorted)]
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ä–∞–Ω
        run_data_slice = None
        for start_idx, end_idx in zip(run_starts, run_ends):
            slice_data = df_sorted.iloc[start_idx:end_idx]
            if len(slice_data) > 0 and slice_data['scraped_at'].iloc[0] == run_time:
                run_data_slice = slice_data
                break
        
        if run_data_slice is None:
            return {}
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ä–∞–Ω–µ
        hotel_prices = {}
        for hotel_name in run_data_slice['hotel_name'].unique():
            hotel_data = run_data_slice[run_data_slice['hotel_name'] == hotel_name]
            if not hotel_data.empty:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ä–∞–Ω–µ
                latest_price = hotel_data.sort_values('scraped_at').iloc[-1]['price']
                hotel_prices[hotel_name] = latest_price
        
        return hotel_prices
    
    def find_price_changes_between_runs(self, prev_run: datetime, curr_run: datetime, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –º–µ–∂–¥—É –¥–≤—É–º—è —Ä–∞–Ω–∞–º–∏"""
        prev_prices = self.get_hotel_prices_for_run(prev_run)
        curr_prices = self.get_hotel_prices_for_run(curr_run)
        
        changes = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö —Ä–∞–Ω–∞—Ö
        for hotel_name in set(prev_prices.keys()) & set(curr_prices.keys()):
            prev_price = prev_prices[hotel_name]
            curr_price = curr_prices[hotel_name]
            
            price_change = curr_price - prev_price
            price_change_pct = (price_change / prev_price) * 100 if prev_price > 0 else 0
            
            if abs(price_change_pct) >= threshold_percent:
                changes.append({
                    'hotel_name': hotel_name,
                    'old_price': prev_price,
                    'new_price': curr_price,
                    'price_change': price_change,
                    'price_change_pct': price_change_pct,
                    'timestamp': curr_run,
                    'alert_type': 'price_drop' if price_change < 0 else 'price_increase',
                    'created_at': datetime.now(timezone.utc).isoformat(),
                    'threshold_percent': threshold_percent,
                    'unique_key': f"{hotel_name}_{curr_run.strftime('%Y-%m-%d_%H-%M')}_{price_change_pct:+.1f}"
                })
        
        return changes
    
    def scan_all_runs_for_changes(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–∞–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω >= –ø–æ—Ä–æ–≥–∞"""
        if self.df.empty:
            return []
        
        run_times = self.get_run_times()
        if len(run_times) < 2:
            return []
        
        all_changes = []
        
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º {len(run_times)} —Ä–∞–Ω–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è >= {threshold_percent}%...")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        for i in range(1, len(run_times)):
            prev_run = run_times[i-1]
            curr_run = run_times[i]
            
            changes = self.find_price_changes_between_runs(prev_run, curr_run, threshold_percent)
            all_changes.extend(changes)
            
            if changes:
                logger.info(f"  üìä –†–∞–Ω {curr_run}: –Ω–∞–π–¥–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(all_changes)}")
        return all_changes
    
    def get_existing_alert_keys(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        existing_alerts = self.load_alerts()
        return {alert.get('unique_key') for alert in existing_alerts if alert.get('unique_key')}
    
    def get_new_alerts(self, all_changes: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)"""
        existing_keys = self.get_existing_alert_keys()
        new_alerts = [alert for alert in all_changes if alert.get('unique_key') not in existing_keys]
        
        logger.info(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(existing_keys)}")
        logger.info(f"üÜï –ù–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(new_alerts)}")
        
        return new_alerts
    
    def process_all_changes(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ"""
        if self.df.empty:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞–Ω—ã –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        all_changes = self.scan_all_runs_for_changes(threshold_percent)
        
        if not all_changes:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        new_alerts = self.get_new_alerts(all_changes)
        
        if new_alerts:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–µ—Ä—Ç—ã
            existing_alerts = self.load_alerts()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            updated_alerts = existing_alerts + new_alerts
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            self.save_alerts(updated_alerts)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
        
        return new_alerts
    
    def create_alert_report(self, threshold_percent: float = 4.0) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
        if self.df.empty:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        all_changes = self.scan_all_runs_for_changes(threshold_percent)
        
        if not all_changes:
            return "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        price_drops = [change for change in all_changes if change['price_change'] < 0]
        price_increases = [change for change in all_changes if change['price_change'] > 0]
        
        report = []
        report.append("üö® –û–¢–ß–ï–¢ –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–• –¶–ï–ù")
        report.append("=" * 50)
        report.append(f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {threshold_percent}%")
        report.append(f"–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(all_changes)}")
        report.append(f"–°–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω: {len(price_drops)}")
        report.append(f"–ü–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω: {len(price_increases)}")
        report.append("")
        
        if price_drops:
            report.append("üìâ –°–ù–ò–ñ–ï–ù–ò–Ø –¶–ï–ù:")
            for change in sorted(price_drops, key=lambda x: x['price_change'])[:10]:
                report.append(f"  {change['hotel_name']}: {change['old_price']} ‚Üí {change['new_price']} PLN ({change['price_change_pct']:+.1f}%)")
        
        if price_increases:
            report.append("\\nüìà –ü–û–í–´–®–ï–ù–ò–Ø –¶–ï–ù:")
            for change in sorted(price_increases, key=lambda x: x['price_change'], reverse=True)[:10]:
                report.append(f"  {change['hotel_name']}: {change['old_price']} ‚Üí {change['new_price']} PLN ({change['price_change_pct']:+.1f}%)")
        
        return "\\n".join(report)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python price_alerts_v2.py <data_file> [alerts_file]")
        sys.exit(1)
    
    data_file = sys.argv[1]
    alerts_file = sys.argv[2] if len(sys.argv) > 2 else data_file.replace('.csv', '_alerts.json')
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤:")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {data_file}")
    print(f"üìÅ –ê–ª–µ—Ä—Ç—ã: {alerts_file}")
    print("=" * 60)
    
    alert_manager = PriceAlertManagerV2(data_file, alerts_file)
    
    if alert_manager.df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        sys.exit(1)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(alert_manager.df)}")
    print(f"üè® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π: {alert_manager.df['hotel_name'].nunique()}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {alert_manager.df['scraped_at'].min()} - {alert_manager.df['scraped_at'].max()}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    new_alerts = alert_manager.process_all_changes(threshold_percent=4.0)
    
    print(f"\\nüÜï –ù–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(new_alerts)}")
    
    if new_alerts:
        print("\\nüìã –ù–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:")
        for alert in new_alerts[-5:]:
            arrow = '‚Üë' if alert['price_change'] > 0 else '‚Üì'
            print(f"  {arrow} {alert['hotel_name']}: {alert['old_price']} ‚Üí {alert['new_price']} PLN ({alert['price_change_pct']:+.1f}%) - {alert['timestamp']}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = alert_manager.create_alert_report(threshold_percent=4.0)
    print(f"\\nüìä –û—Ç—á–µ—Ç:")
    print(report)

if __name__ == "__main__":
    main()
