#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
"""

import pandas as pd
import json
import os
from datetime import datetime
from typing import List, Dict, Any
import logging

logger = logging.getLogger(__name__)

class PriceAlertManager:
    def __init__(self, data_file="data/travel_prices.csv", alerts_file="data/price_alerts_history.json"):
        self.data_file = data_file
        self.alerts_file = alerts_file
        self.df = self.load_data()
        
    def load_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.data_file):
            return pd.DataFrame()
        
        try:
            df = pd.read_csv(self.data_file)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º robust –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
            df['scraped_at'] = pd.to_datetime(df['scraped_at'], errors='coerce', utc=True)
            df = df.dropna(subset=['scraped_at'])
            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def load_alerts(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–ª–µ—Ä—Ç–æ–≤"""
        if not os.path.exists(self.alerts_file):
            return []
        
        try:
            with open(self.alerts_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å "alerts" –∫–ª—é—á–æ–º
                if isinstance(data, dict) and 'alerts' in data:
                    return data['alerts']
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ø–∏—Å–æ–∫
                elif isinstance(data, list):
                    return data
                else:
                    return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def save_alerts(self, alerts: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.alerts_file, 'w', encoding='utf-8') as f:
                json.dump(alerts, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def check_price_changes(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã"""
        if self.df.empty:
            return []
        
        alerts = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–µ–ª—è–º
        for hotel_name in self.df['hotel_name'].unique():
            hotel_data = self.df[self.df['hotel_name'] == hotel_name].sort_values('scraped_at')
            
            if len(hotel_data) < 2:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            for i in range(1, len(hotel_data)):
                prev_price = hotel_data.iloc[i-1]['price']
                curr_price = hotel_data.iloc[i]['price']
                prev_date = hotel_data.iloc[i-1]['scraped_at']
                curr_date = hotel_data.iloc[i]['scraped_at']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                price_change = curr_price - prev_price
                price_change_pct = (price_change / prev_price) * 100 if prev_price > 0 else 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥
                if abs(price_change_pct) >= threshold_percent:
                    alert = {
                        'hotel_name': hotel_name,
                        'old_price': prev_price,
                        'new_price': curr_price,
                        'price_change': price_change,
                        'price_change_pct': price_change_pct,
                        'timestamp': curr_date.isoformat(),
                        'alert_type': 'price_drop' if price_change < 0 else 'price_increase',
                        'created_at': datetime.now().isoformat(),
                        'threshold_percent': threshold_percent,
                        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                        'unique_key': f"{hotel_name}_{curr_date.strftime('%Y-%m-%d_%H-%M')}_{price_change_pct:.1f}"
                    }
                    alerts.append(alert)
        
        return alerts
    
    def deduplicate_alerts(self, new_alerts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ unique_key"""
        existing_alerts = self.load_alerts()
        existing_keys = {alert.get('unique_key') for alert in existing_alerts if 'unique_key' in alert}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        unique_new_alerts = []
        for alert in new_alerts:
            if alert.get('unique_key') not in existing_keys:
                unique_new_alerts.append(alert)
                existing_keys.add(alert.get('unique_key'))
        
        return unique_new_alerts
    
    def save_new_alerts(self, new_alerts: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (–Ω–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è) –∞–ª–µ—Ä—Ç—ã"""
        if not new_alerts:
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–µ—Ä—Ç—ã
        existing_alerts = self.load_alerts()
        
        # –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        unique_new_alerts = self.deduplicate_alerts(new_alerts)
        
        if unique_new_alerts:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            all_alerts = existing_alerts + unique_new_alerts
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            try:
                with open(self.alerts_file, 'w', encoding='utf-8') as f:
                    json.dump(all_alerts, f, indent=2, ensure_ascii=False, default=str)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(unique_new_alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ {len(new_alerts) - len(unique_new_alerts)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        else:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def get_price_drops(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω"""
        all_alerts = self.check_price_changes(threshold_percent)
        return [alert for alert in all_alerts if alert['price_change'] < 0]
    
    def get_price_increases(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω"""
        all_alerts = self.check_price_changes(threshold_percent)
        return [alert for alert in all_alerts if alert['price_change'] > 0]
    
    def scan_all_price_changes(self, threshold_percent: float = 4.0) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω >= –ø–æ—Ä–æ–≥–∞"""
        if self.df.empty:
            return []
        
        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è >= {threshold_percent}%...")
        all_alerts = self.check_price_changes(threshold_percent)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã (—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π)
        self.save_new_alerts(all_alerts)
        
        return all_alerts
    
    def create_alert_report(self, threshold_percent: float = 4.0) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
        if self.df.empty:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        price_drops = self.get_price_drops(threshold_percent)
        price_increases = self.get_price_increases(threshold_percent)
        
        report = []
        report.append("üö® –û–¢–ß–ï–¢ –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–• –¶–ï–ù")
        report.append("=" * 50)
        report.append(f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {threshold_percent}%")
        report.append(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        if price_drops:
            report.append("üìâ –°–ù–ò–ñ–ï–ù–ò–Ø –¶–ï–ù:")
            report.append("-" * 30)
            for i, alert in enumerate(price_drops, 1):
                report.append(f"{i}. {alert['hotel_name'][:50]}")
                report.append(f"   –ë—ã–ª–æ: {alert['old_price']:.0f} PLN ‚Üí –°—Ç–∞–ª–æ: {alert['new_price']:.0f} PLN")
                report.append(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {alert['price_change']:+.0f} PLN ({alert['price_change_pct']:+.1f}%)")
                report.append(f"   –í—Ä–µ–º—è: {alert['timestamp'][:19]}")
                report.append("")
        else:
            report.append("üìâ –°–Ω–∏–∂–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            report.append("")
        
        if price_increases:
            report.append("üìà –ü–û–í–´–®–ï–ù–ò–Ø –¶–ï–ù:")
            report.append("-" * 30)
            for i, alert in enumerate(price_increases, 1):
                report.append(f"{i}. {alert['hotel_name'][:50]}")
                report.append(f"   –ë—ã–ª–æ: {alert['old_price']:.0f} PLN ‚Üí –°—Ç–∞–ª–æ: {alert['new_price']:.0f} PLN")
                report.append(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {alert['price_change']:+.0f} PLN ({alert['price_change_pct']:+.1f}%)")
                report.append(f"   –í—Ä–µ–º—è: {alert['timestamp'][:19]}")
                report.append("")
        else:
            report.append("üìà –ü–æ–≤—ã—à–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            report.append("")
        
        return "\n".join(report)
    
    def save_alert_report(self, threshold_percent: float = 5.0):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–ª–µ—Ä—Ç–∞—Ö –≤ —Ñ–∞–π–ª"""
        report = self.create_alert_report(threshold_percent)
        
        report_path = "data/price_alerts_report.txt"
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)
            logger.info(f"–û—Ç—á–µ—Ç –æ–± –∞–ª–µ—Ä—Ç–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∞–ª–µ—Ä—Ç–∞—Ö: {e}")
    
    def get_top_cheap_hotels_with_alerts(self, n: int = 15) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
        if self.df.empty:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π
        top_hotels = self.df.nsmallest(n, 'price')['hotel_name'].unique()
        
        result = []
        for hotel_name in top_hotels:
            hotel_data = self.df[self.df['hotel_name'] == hotel_name].sort_values('scraped_at')
            
            if len(hotel_data) < 2:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–µ–ª—é
            first_price = hotel_data.iloc[0]['price']
            last_price = hotel_data.iloc[-1]['price']
            min_price = hotel_data['price'].min()
            max_price = hotel_data['price'].max()
            avg_price = hotel_data['price'].mean()
            
            price_change = last_price - first_price
            price_change_pct = (price_change / first_price) * 100 if first_price > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if price_change < 0:
                status = "üìâ –°–ù–ò–ñ–ï–ù–ò–ï"
                status_color = "green"
            elif price_change > 0:
                status = "üìà –ü–û–í–´–®–ï–ù–ò–ï"
                status_color = "red"
            else:
                status = "‚û°Ô∏è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô"
                status_color = "gray"
            
            hotel_info = {
                'hotel_name': hotel_name,
                'current_price': last_price,
                'min_price': min_price,
                'max_price': max_price,
                'avg_price': avg_price,
                'price_change': price_change,
                'price_change_pct': price_change_pct,
                'status': status,
                'status_color': status_color,
                'records_count': len(hotel_data),
                'first_date': hotel_data.iloc[0]['scraped_at'].isoformat(),
                'last_date': hotel_data.iloc[-1]['scraped_at'].isoformat()
            }
            
            result.append(hotel_info)
        
        return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    alert_manager = PriceAlertManager()
    
    if alert_manager.df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    alert_manager.save_alert_report(threshold_percent=5.0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –æ—Ç–µ–ª–µ–π —Å –∞–ª–µ—Ä—Ç–∞–º–∏
    top_hotels = alert_manager.get_top_cheap_hotels_with_alerts(15)
    
    print(f"\nüìä –¢–û–ü-15 –°–ê–ú–´–• –î–ï–®–ï–í–´–• –û–¢–ï–õ–ï–ô –° –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò –¶–ï–ù:")
    print("=" * 80)
    
    for i, hotel in enumerate(top_hotels, 1):
        print(f"{i:2d}. {hotel['hotel_name'][:50]:<50} | {hotel['current_price']:>8.0f} PLN | {hotel['status']}")
        print(f"    –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {hotel['price_change']:+.0f} PLN ({hotel['price_change_pct']:+.1f}%) | –ó–∞–ø–∏—Å–µ–π: {hotel['records_count']}")
        print()

if __name__ == "__main__":
    main()
