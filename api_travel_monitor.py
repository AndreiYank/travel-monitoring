#!/usr/bin/env python3
"""
API-based Travel Price Monitor - –ü—Ä–æ—Ç–æ—Ç–∏–ø –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import json
import csv
import os
import sys
from datetime import datetime
from typing import List, Dict, Any, Optional
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APITravelMonitor:
    """API-based –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
    
    def __init__(self, config_file: str = "api_config.json"):
        self.config_file = config_file
        self.data_file = "data/travel_prices.csv"
        self.config = self.load_config()
        self.session = None
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API"""
        default_config = {
            "api_base_url": "https://fly.pl",
            "endpoints": {
                "search": "/api/search/offers",
                "offers": "/api/offers",
                "search_ajax": "/ajax/search"
            },
            "headers": {
                "User-Agent": "TravelMonitor/1.0 (API Research)",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "pl-PL,pl;q=0.9,en;q=0.8",
                "Referer": "https://fly.pl/kierunek/turcja/",
                "X-Requested-With": "XMLHttpRequest"
            },
            "search_params": {
                "filter[dest]": "14:",
                "filter[cityids]": "0",
                "filter[whenFrom]": "20-09-2025",
                "filter[whenTo]": "04-10-2025",
                "filter[duration]": "6:15",
                "filter[from]": "Warszawa,Warszawa-Radom",
                "filter[person]": "2",
                "filter[child]": "1",
                "filter[price]": "0",
                "filter[PriceFrom]": "0",
                "filter[PriceTo]": "8100",
                "filter[addCategory]": "40",
                "filter[addCatering]": "1",
                "filter[addMisc]": "0",
                "filter[addTransport]": "F",
                "filter[fp]": "1",
                "order_by": "ofr_price",
                "filter[tourOperator]": "0",
                "filter[childAge][1]": "20201210"
            },
            "rate_limits": {
                "requests_per_minute": 60,
                "delay_between_requests": 1.0
            },
            "retry_config": {
                "max_retries": 3,
                "backoff_factor": 2
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
                return {**default_config, **config}
            else:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return default_config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession(
            headers=self.config['headers'],
            timeout=aiohttp.ClientTimeout(total=30)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def discover_api_endpoints(self) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints"""
        
        logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ API endpoints...")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        potential_endpoints = [
            "/api/search/offers",
            "/api/offers",
            "/api/travel/search",
            "/api/search",
            "/api/v1/search",
            "/api/v2/search",
            "/search/api",
            "/offers/api",
            "/travel/api",
            "/ajax/search",
            "/ajax/offers",
            "/search/ajax",
            "/offers/ajax"
        ]
        
        results = {}
        
        for endpoint in potential_endpoints:
            url = f"{self.config['api_base_url']}{endpoint}"
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å
                async with self.session.get(url) as response:
                    if response.status == 200:
                        content_type = response.headers.get('content-type', '')
                        if 'json' in content_type:
                            data = await response.json()
                            results[endpoint] = {
                                'method': 'GET',
                                'status': response.status,
                                'content_type': content_type,
                                'data_preview': str(data)[:200] + "..." if len(str(data)) > 200 else str(data),
                                'success': True
                            }
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω API endpoint: {endpoint}")
                        else:
                            text = await response.text()
                            results[endpoint] = {
                                'method': 'GET',
                                'status': response.status,
                                'content_type': content_type,
                                'text_preview': text[:200] + "..." if len(text) > 200 else text,
                                'success': False
                            }
                    else:
                        results[endpoint] = {
                            'method': 'GET',
                            'status': response.status,
                            'success': False
                        }
                        
            except Exception as e:
                results[endpoint] = {
                    'method': 'GET',
                    'error': str(e),
                    'success': False
                }
        
        return results
    
    async def test_search_endpoints(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ endpoints —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö endpoints...")
        
        # Endpoints –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
        post_endpoints = [
            "/api/search/offers",
            "/api/search",
            "/api/travel/search",
            "/ajax/search",
            "/search/api"
        ]
        
        results = {}
        
        for endpoint in post_endpoints:
            url = f"{self.config['api_base_url']}{endpoint}"
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST —Å JSON
                async with self.session.post(
                    url,
                    json=self.config['search_params'],
                    headers={'Content-Type': 'application/json'}
                ) as response:
                    
                    results[endpoint] = {
                        'method': 'POST JSON',
                        'status': response.status,
                        'content_type': response.headers.get('content-type', ''),
                        'content_length': response.headers.get('content-length', 'unknown')
                    }
                    
                    if response.status == 200:
                        try:
                            data = await response.json()
                            results[endpoint]['data_preview'] = str(data)[:300] + "..." if len(str(data)) > 300 else str(data)
                            results[endpoint]['success'] = True
                            logger.info(f"‚úÖ POST JSON —É—Å–ø–µ—à–µ–Ω: {endpoint}")
                        except:
                            text = await response.text()
                            results[endpoint]['text_preview'] = text[:300] + "..." if len(text) > 300 else text
                            results[endpoint]['success'] = True
                    else:
                        results[endpoint]['success'] = False
                        
            except Exception as e:
                results[endpoint] = {
                    'method': 'POST JSON',
                    'error': str(e),
                    'success': False
                }
        
        return results
    
    async def search_offers_api(self, endpoint: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API"""
        
        if not endpoint:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
            endpoints_to_try = [
                "/api/search/offers",
                "/api/search",
                "/ajax/search",
                "/search/api"
            ]
        else:
            endpoints_to_try = [endpoint]
        
        for endpoint in endpoints_to_try:
            url = f"{self.config['api_base_url']}{endpoint}"
            
            try:
                logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ {endpoint}...")
                
                # –ü—Ä–æ–±—É–µ–º POST —Å JSON
                async with self.session.post(
                    url,
                    json=self.config['search_params'],
                    headers={'Content-Type': 'application/json'}
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        offers = self.parse_api_response(data)
                        if offers:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ {endpoint}")
                            return offers
                    else:
                        logger.warning(f"‚ùå {endpoint} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å {endpoint}: {e}")
                continue
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π API endpoint")
        return []
    
    def parse_api_response(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç API –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        offers = []
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if isinstance(data, dict):
                # –ò—â–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                offers_data = None
                
                if 'data' in data and 'offers' in data['data']:
                    offers_data = data['data']['offers']
                elif 'offers' in data:
                    offers_data = data['offers']
                elif 'results' in data:
                    offers_data = data['results']
                elif 'items' in data:
                    offers_data = data['items']
                elif isinstance(data.get('data'), list):
                    offers_data = data['data']
                elif isinstance(data, list):
                    offers_data = data
                
                if offers_data and isinstance(offers_data, list):
                    for item in offers_data:
                        if isinstance(item, dict):
                            offer = self.parse_offer_item(item)
                            if offer:
                                offers.append(offer)
            
            elif isinstance(data, list):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                for item in data:
                    if isinstance(item, dict):
                        offer = self.parse_offer_item(item)
                        if offer:
                            offers.append(offer)
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}")
        
        return offers
    
    def parse_offer_item(self, item: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            hotel_name = (
                item.get('hotelName') or 
                item.get('hotel_name') or 
                item.get('name') or 
                item.get('title') or 
                item.get('hotel') or
                ""
            )
            
            price = self.extract_price_from_item(item)
            
            dates = self.extract_dates_from_item(item)
            duration = self.extract_duration_from_item(item)
            
            # URL –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            url = (
                item.get('url') or 
                item.get('link') or 
                item.get('offerUrl') or
                ""
            )
            
            if hotel_name and price:
                return {
                    'hotel_name': hotel_name,
                    'price': price,
                    'dates': dates,
                    'duration': duration,
                    'rating': item.get('rating', ''),
                    'scraped_at': datetime.now().isoformat(),
                    'url': url
                }
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        
        return None
    
    def extract_price_from_item(self, item: Dict[str, Any]) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω—ã
        price_fields = ['price', 'cost', 'amount', 'totalPrice', 'total_price', 'value']
        
        for field in price_fields:
            if field in item:
                price_value = item[field]
                if isinstance(price_value, (int, float)):
                    return float(price_value)
                elif isinstance(price_value, str):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    import re
                    numbers = re.findall(r'[\d,]+', price_value.replace('.', '').replace(',', '.'))
                    if numbers:
                        return float(numbers[0])
        
        return 0.0
    
    def extract_dates_from_item(self, item: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–∞—Ç
        date_fields = ['dates', 'dateRange', 'date_range', 'period', 'travelDates']
        
        for field in date_fields:
            if field in item:
                date_value = item[field]
                if isinstance(date_value, str) and date_value.strip():
                    return date_value.strip()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç
        if 'dateFrom' in item and 'dateTo' in item:
            return f"{item['dateFrom']} - {item['dateTo']}"
        
        return "20-09-2025 - 04-10-2025"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def extract_duration_from_item(self, item: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_fields = ['duration', 'nights', 'days', 'length', 'period']
        
        for field in duration_fields:
            if field in item:
                duration_value = item[field]
                if isinstance(duration_value, str) and duration_value.strip():
                    return duration_value.strip()
                elif isinstance(duration_value, (int, float)):
                    return f"{int(duration_value)} dni"
        
        return "6-15 –¥–Ω–µ–π"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def save_offers(self, offers: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ CSV —Ñ–∞–π–ª"""
        
        if not offers:
            logger.warning("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        file_exists = os.path.exists(self.data_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        with open(self.data_file, 'a', newline='', encoding='utf-8') as f:
            fieldnames = ['hotel_name', 'price', 'dates', 'duration', 'rating', 'scraped_at', 'url']
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
            if not file_exists:
                writer.writeheader()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for offer in offers:
                writer.writerow(offer)
        
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ {self.data_file}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–¥—Ö–æ–¥–∞"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API Travel Monitor...")
    
    async with APITravelMonitor() as monitor:
        # 1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ API endpoints
        logger.info("\n=== 1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ API endpoints ===")
        api_endpoints = await monitor.discover_api_endpoints()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        with open('api_endpoints_discovery.json', 'w', encoding='utf-8') as f:
            json.dump(api_endpoints, f, indent=2, ensure_ascii=False)
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö endpoints
        logger.info("\n=== 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö endpoints ===")
        search_results = await monitor.test_search_endpoints()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        with open('api_search_tests.json', 'w', encoding='utf-8') as f:
            json.dump(search_results, f, indent=2, ensure_ascii=False)
        
        # 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        logger.info("\n=== 3. –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API ===")
        offers = await monitor.search_offers_api()
        
        if offers:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            await monitor.save_offers(offers)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            logger.info("\nüìä –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
            for i, offer in enumerate(offers[:3]):
                logger.info(f"  {i+1}. {offer['hotel_name']} - {offer['price']} PLN")
        else:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API")
        
        # 4. –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "="*50)
        logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        logger.info("="*50)
        
        successful_apis = [k for k, v in api_endpoints.items() if v.get('success')]
        successful_searches = [k for k, v in search_results.items() if v.get('success')]
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ API endpoints: {len(successful_apis)}")
        logger.info(f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö endpoints: {len(successful_searches)}")
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(offers)}")
        
        if successful_apis:
            logger.info(f"\nüéØ –†–∞–±–æ—á–∏–µ API endpoints:")
            for endpoint in successful_apis:
                logger.info(f"   - {endpoint}")
        
        if successful_searches:
            logger.info(f"\nüéØ –†–∞–±–æ—á–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ endpoints:")
            for endpoint in successful_searches:
                logger.info(f"   - {endpoint}")
        
        logger.info(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        logger.info(f"   - api_endpoints_discovery.json")
        logger.info(f"   - api_search_tests.json")
        if offers:
            logger.info(f"   - {monitor.data_file}")

if __name__ == "__main__":
    asyncio.run(main())
