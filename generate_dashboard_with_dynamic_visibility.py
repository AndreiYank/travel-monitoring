#!/usr/bin/env python3
"""
–î–∞—à–±–æ—Ä–¥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Ä–∞–Ω–µ
"""

import pandas as pd
import json
import csv
from datetime import datetime, timedelta, timezone
import os
import re
from urllib.parse import urlparse, parse_qs
from offer_visibility_manager import OfferVisibilityManager

def generate_dashboard_with_dynamic_visibility(data_file: str = 'data/travel_prices.csv', 
                                             output_file: str = 'index.html', 
                                             title: str = 'Travel Price Monitor ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é', 
                                             charts_subdir: str = 'hotel-charts', 
                                             tz: str = 'Europe/Warsaw', 
                                             alerts_file: str = None, 
                                             all_airports_data_file: str = None, 
                                             airport_comparison_file: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏
    visibility_manager = OfferVisibilityManager(data_file)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        df = pd.read_csv(data_file, quoting=csv.QUOTE_ALL, on_bad_lines='skip')
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (—Å/–±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã)
        raw = df['scraped_at'].astype(str)
        mask_tz = raw.str.contains(r"Z$|[+-]\d{2}:\d{2}$", regex=True)
        tz_series = pd.to_datetime(raw.where(mask_tz), errors='coerce', utc=True)
        tz_series = tz_series.dt.tz_convert(tz)
        naive_series = pd.to_datetime(raw.where(~mask_tz), errors='coerce')
        try:
            naive_series = naive_series.dt.tz_localize(tz)
        except Exception:
            # –ï—Å–ª–∏ —á–∞—Å—Ç—å —É–∂–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ tz-aware/NaT ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
            pass
        df['scraped_at_local'] = tz_series.combine_first(naive_series)
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
        df = df.dropna(subset=['scraped_at_local'])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤
        df['scraped_at_display'] = df['scraped_at_local']
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–Ω–∞
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    visibility_manager.update_visibility(df)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    print("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–∏–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    df_visible = visibility_manager.filter_visible_offers(df)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏
    visibility_stats = visibility_manager.get_visibility_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏: {visibility_stats['visible_count']} –≤–∏–¥–∏–º—ã—Ö, {visibility_stats['hidden_count']} —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    # –û—Ç–∫–∞—Ç —Ñ–∏—á–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç
    df_all_airports = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    airport_comparison_data = None
    if airport_comparison_file and os.path.exists(airport_comparison_file):
        try:
            with open(airport_comparison_file, 'r', encoding='utf-8') as f:
                airport_comparison_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if all_airports_data_file and os.path.exists(all_airports_data_file):
        try:
            df_all_airports = pd.read_csv(all_airports_data_file, quoting=csv.QUOTE_ALL, on_bad_lines='skip')
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
            raw_all = df_all_airports['scraped_at'].astype(str)
            mask_tz_all = raw_all.str.contains(r"Z$|[+-]\d{2}:\d{2}$", regex=True)
            tz_series_all = pd.to_datetime(raw_all.where(mask_tz_all), errors='coerce', utc=True)
            tz_series_all = tz_series_all.dt.tz_convert(tz)
            naive_series_all = pd.to_datetime(raw_all.where(~mask_tz_all), errors='coerce')
            try:
                naive_series_all = naive_series_all.dt.tz_localize(tz)
            except Exception:
                pass
            df_all_airports['scraped_at_local'] = tz_series_all.combine_first(naive_series_all)
            df_all_airports = df_all_airports.dropna(subset=['scraped_at_local'])
            df_all_airports['scraped_at_display'] = df_all_airports['scraped_at_local']
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –∫ –¥–∞–Ω–Ω—ã–º –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            df_all_airports_visible = visibility_manager.filter_visible_offers(df_all_airports)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {len(df_all_airports_visible)} –≤–∏–¥–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {e}")
            df_all_airports = None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
    df = df_visible
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    # –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    # ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    
    # –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞—à–±–æ—Ä–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    html_content = generate_simplified_dashboard_html(df, visibility_stats, title)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—à–±–æ—Ä–¥
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

def generate_simplified_dashboard_html(df: pd.DataFrame, visibility_stats: dict, title: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTML –¥–∞—à–±–æ—Ä–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏"""
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try:
        updated_str = df['scraped_at_display'].max().strftime('%d.%m.%Y %H:%M')
    except Exception:
        updated_str = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–µ–ª—è–º
    hotel_stats = df.groupby('hotel_name').agg({
        'price': ['min', 'max', 'mean', 'count'],
        'scraped_at_display': 'max'
    }).round(2)
    
    hotel_stats.columns = ['min_price', 'max_price', 'avg_price', 'offers_count', 'last_seen']
    hotel_stats = hotel_stats.sort_values('min_price')
    
    html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f7;
            color: #1d1d1f;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }}
        .header h1 {{
            margin: 0 0 10px 0;
            font-size: 2.5em;
            font-weight: 700;
        }}
        .header p {{
            margin: 0;
            opacity: 0.9;
            font-size: 1.1em;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .stat-card {{
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border-left: 4px solid #667eea;
        }}
        .stat-card h3 {{
            margin: 0 0 10px 0;
            color: #667eea;
            font-size: 1.1em;
            font-weight: 600;
        }}
        .stat-value {{
            font-size: 2em;
            font-weight: 700;
            color: #1d1d1f;
            margin: 0;
        }}
        .visibility-info {{
            background: #e8f4fd;
            border: 1px solid #b3d9ff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }}
        .visibility-info h3 {{
            margin: 0 0 15px 0;
            color: #0066cc;
        }}
        .visibility-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }}
        .visibility-stat {{
            text-align: center;
        }}
        .visibility-stat .label {{
            font-size: 0.9em;
            color: #666;
            margin-bottom: 5px;
        }}
        .visibility-stat .value {{
            font-size: 1.5em;
            font-weight: 600;
            color: #0066cc;
        }}
        .hotels-table {{
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }}
        .hotels-table h3 {{
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            color: #495057;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
        }}
        th, td {{
            padding: 12px 20px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }}
        th {{
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }}
        tr:hover {{
            background: #f8f9fa;
        }}
        .price {{
            font-weight: 600;
            color: #28a745;
        }}
        .last-seen {{
            font-size: 0.9em;
            color: #6c757d;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #6c757d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{title}</h1>
            <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_str}</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>–í—Å–µ–≥–æ –æ—Ç–µ–ª–µ–π</h3>
                <p class="stat-value">{len(hotel_stats)}</p>
            </div>
            <div class="stat-card">
                <h3>–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</h3>
                <p class="stat-value">{len(df)}</p>
            </div>
            <div class="stat-card">
                <h3>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</h3>
                <p class="stat-value">{df['price'].mean():.0f} z≈Ç</p>
            </div>
            <div class="stat-card">
                <h3>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</h3>
                <p class="stat-value">{df['price'].min():.0f} z≈Ç</p>
            </div>
        </div>
        
        <div class="visibility-info">
            <h3>üîç –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</h3>
            <p>–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Ä–∞–Ω–µ. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ, —Å–∫—Ä—ã—Ç—ã –∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Ä–∞–Ω–µ.</p>
            <div class="visibility-stats">
                <div class="visibility-stat">
                    <div class="label">–í–∏–¥–∏–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                    <div class="value">{visibility_stats['visible_count']}</div>
                </div>
                <div class="visibility-stat">
                    <div class="label">–°–∫—Ä—ã—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                    <div class="value">{visibility_stats['hidden_count']}</div>
                </div>
                <div class="visibility-stat">
                    <div class="label">–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                    <div class="value">{visibility_stats['total_tracked_offers']}</div>
                </div>
                <div class="visibility-stat">
                    <div class="label">–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–Ω</div>
                    <div class="value">{visibility_stats['last_run_timestamp'][:16] if visibility_stats['last_run_timestamp'] else 'N/A'}</div>
                </div>
            </div>
        </div>
        
        <div class="hotels-table">
            <h3>üè® –û—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)</h3>
            <table>
                <thead>
                    <tr>
                        <th>–û—Ç–µ–ª—å</th>
                        <th>–ú–∏–Ω. —Ü–µ–Ω–∞</th>
                        <th>–ú–∞–∫—Å. —Ü–µ–Ω–∞</th>
                        <th>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</th>
                        <th>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</th>
                        <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑</th>
                    </tr>
                </thead>
                <tbody>
"""
    
    for hotel_name, stats in hotel_stats.head(20).iterrows():
        last_seen = stats['last_seen'].strftime('%d.%m %H:%M') if pd.notna(stats['last_seen']) else 'N/A'
        html += f"""
                    <tr>
                        <td><strong>{hotel_name}</strong></td>
                        <td class="price">{stats['min_price']:.0f} z≈Ç</td>
                        <td class="price">{stats['max_price']:.0f} z≈Ç</td>
                        <td class="price">{stats['avg_price']:.0f} z≈Ç</td>
                        <td>{int(stats['offers_count'])}</td>
                        <td class="last-seen">{last_seen}</td>
                    </tr>
"""
    
    html += """
                </tbody>
            </table>
        </div>
        
        <div class="footer">
            <p>–î–∞—à–±–æ—Ä–¥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
        </div>
    </div>
</body>
</html>
"""
    
    return html

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import sys
    
    data_file = sys.argv[1] if len(sys.argv) > 1 else 'data/travel_prices.csv'
    output_file = sys.argv[2] if len(sys.argv) > 2 else 'index_dynamic_visibility.html'
    
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é...")
    print(f"–î–∞–Ω–Ω—ã–µ: {data_file}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    
    generate_dashboard_with_dynamic_visibility(
        data_file=data_file,
        output_file=output_file,
        title="Travel Price Monitor ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å"
    )

if __name__ == "__main__":
    main()
