#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from typing import List, Dict, Any
import logging
from travel_monitor_with_airport_comparison import TravelMonitorWithAirportComparison

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('all_countries_monitor.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class AllCountriesMonitor:
    def __init__(self):
        self.countries = [
            {
                'name': '–ì—Ä–µ—Ü–∏—è',
                'base_config': 'config.json',
                'any_airports_config': 'config_any_airports.json'
            },
            {
                'name': '–ï–≥–∏–ø–µ—Ç',
                'base_config': 'config_egypt.json',
                'any_airports_config': 'config_egypt_any_airports.json'
            },
            {
                'name': '–¢—É—Ä—Ü–∏—è',
                'base_config': 'config_turkey.json',
                'any_airports_config': 'config_turkey_any_airports.json'
            }
        ]
    
    async def run_all_countries(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
        logger.info("üåç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤...")
        
        results = {}
        
        for country in self.countries:
            logger.info(f"\n{'='*60}")
            logger.info(f"üèñÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {country['name']}")
            logger.info(f"{'='*60}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if not os.path.exists(country['base_config']):
                    logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {country['base_config']}")
                    results[country['name']] = {'status': 'error', 'message': f'Config file not found: {country["base_config"]}'}
                    continue
                
                if not os.path.exists(country['any_airports_config']):
                    logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {country['any_airports_config']}")
                    results[country['name']] = {'status': 'error', 'message': f'Config file not found: {country["any_airports_config"]}'}
                    continue
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
                monitor = TravelMonitorWithAirportComparison(
                    country['base_config'],
                    country['any_airports_config']
                )
                
                success = await monitor.run_monitoring_with_comparison()
                
                if success:
                    logger.info(f"‚úÖ {country['name']}: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    results[country['name']] = {'status': 'success', 'message': 'Monitoring completed successfully'}
                else:
                    logger.error(f"‚ùå {country['name']}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                    results[country['name']] = {'status': 'error', 'message': 'Monitoring failed'}
                    
            except Exception as e:
                logger.error(f"‚ùå {country['name']}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                results[country['name']] = {'status': 'error', 'message': str(e)}
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self.create_summary_report(results)
        
        return results
    
    def create_summary_report(self, results: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º"""
        logger.info("\n" + "="*60)
        logger.info("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
        logger.info("="*60)
        
        successful_countries = [name for name, result in results.items() if result['status'] == 'success']
        failed_countries = [name for name, result in results.items() if result['status'] == 'error']
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(successful_countries)} —Å—Ç—Ä–∞–Ω")
        for country in successful_countries:
            logger.info(f"   - {country}")
        
        if failed_countries:
            logger.info(f"‚ùå –û—à–∏–±–∫–∏ –≤ {len(failed_countries)} —Å—Ç—Ä–∞–Ω–∞—Ö:")
            for country in failed_countries:
                logger.info(f"   - {country}: {results[country]['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        summary = {
            'timestamp': datetime.now().isoformat(),
            'total_countries': len(self.countries),
            'successful': len(successful_countries),
            'failed': len(failed_countries),
            'results': results
        }
        
        try:
            with open('data/all_countries_monitoring_summary.json', 'w', encoding='utf-8') as f:
                json.dump(summary, f, ensure_ascii=False, indent=2)
            logger.info(f"üìÅ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data/all_countries_monitoring_summary.json")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = AllCountriesMonitor()
    
    try:
        results = asyncio.run(monitor.run_all_countries())
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for result in results.values() if result['status'] == 'success')
        total = len(results)
        
        if successful == total:
            print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! ({successful}/{total})")
            sys.exit(0)
        else:
            print(f"\n‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ ({successful}/{total})")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
