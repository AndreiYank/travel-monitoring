name: Travel Price Monitor

on:
  schedule:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    - cron: "0 * * * *"
  workflow_dispatch: # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "travel-monitor"
  cancel-in-progress: false

jobs:
  monitor-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dashboard.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          playwright install chromium

      - name: Run price monitoring (Greece, Egypt & Turkey)
        run: |
          echo "üöÄ Starting price monitoring at $(date)"
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
          export PLAYWRIGHT_BROWSERS_PATH=/home/runner/.cache/ms-playwright
          # Greece (keeps historical CSV path)
          python travel_monitor.py --config config.json --data-file travel_prices.csv
          # Greece (any airport)
          python travel_monitor.py --config config.json --data-file travel_prices_any.csv --strip-from
          # Egypt (separate dataset)
          python travel_monitor.py --config config_egypt.json --data-file egypt_travel_prices.csv
          # Egypt (any airport)
          python travel_monitor.py --config config_egypt.json --data-file egypt_travel_prices_any.csv --strip-from
          # Turkey (new dataset)
          python travel_monitor.py --config config_turkey.json --data-file turkey_travel_prices.csv
          # Turkey (any airport)
          python travel_monitor.py --config config_turkey.json --data-file turkey_travel_prices_any.csv --strip-from
          echo "‚úÖ Price monitoring completed"

      - name: Run data analysis
        run: |
          echo "üìä Starting data analysis at $(date)"
          python analyze_data.py --charts --export
          echo "‚úÖ Data analysis completed"

      - name: Generate dashboards (Greece, Egypt & Turkey) and landing
        run: |
          echo "üåê Generating dashboards at $(date)"
          # Greece dashboard
          python generate_inline_charts_dashboard.py \
            --data-file data/travel_prices.csv \
            --output index_greece.html \
            --title "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ‚Ä¢ –ì—Ä–µ—Ü–∏—è" \
            --charts-dir hotel-charts/greece \
            --alerts-file data/travel_prices_alerts.json \
            --all-airports-data-file data/travel_prices_any.csv
          # Egypt dashboard (if data exists)
          if [ -f "data/egypt_travel_prices.csv" ]; then
            python generate_inline_charts_dashboard.py \
              --data-file data/egypt_travel_prices.csv \
              --output index_egypt.html \
              --title "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ‚Ä¢ –ï–≥–∏–ø–µ—Ç" \
              --charts-dir hotel-charts/egypt \
              --alerts-file data/egypt_travel_prices_alerts.json \
              --all-airports-data-file data/egypt_travel_prices_any.csv
          else
            echo "‚ö†Ô∏è Egypt dataset not found; skipping Egypt dashboard"
          fi
          # Turkey dashboard (if data exists)
          if [ -f "data/turkey_travel_prices.csv" ]; then
            python generate_inline_charts_dashboard.py \
              --data-file data/turkey_travel_prices.csv \
              --output index_turkey.html \
              --title "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ‚Ä¢ –¢—É—Ä—Ü–∏—è" \
              --charts-dir hotel-charts/turkey \
              --alerts-file data/turkey_travel_prices_alerts.json \
              --all-airports-data-file data/turkey_travel_prices_any.csv
          else
            echo "‚ö†Ô∏è Turkey dataset not found; skipping Turkey dashboard"
          fi
          # Landing page with tiles
          python generate_landing.py
          echo "‚úÖ Dashboards generated (index_greece.html, index_egypt.html, index_turkey.html, index.html)"

      - name: Check for price alerts
        id: alerts
        run: |
          echo "üö® Checking for price alerts..."
          ALERT_COUNT="0"
          if [ -f "data/price_alerts_report.txt" ]; then
            ALERT_COUNT=$(grep -c "üìâ\\|üìà" data/price_alerts_report.txt 2>/dev/null || echo "0")
          fi
          printf "alert_count=%s\n" "$ALERT_COUNT" >> "$GITHUB_OUTPUT"
          echo "Found $ALERT_COUNT price changes"

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Commit and push data updates
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "üìù Committing data changes..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å non-fast-forward
          git fetch origin main || true
          git checkout main || true
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          git stash push -u -m "ci-stash" || true
          git pull --rebase origin main || true
          git stash pop || true
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø—É—Ç–µ–π)
          git add -f data/ || true
          git add index.html index_greece.html index_egypt.html index_turkey.html || true
          git add -f hotel-charts/ hotel-charts/greece/ hotel-charts/egypt/ hotel-charts/turkey/ || true
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            COMMIT_MSG="üîÑ Hourly update - $(date '+%Y-%m-%d %H:%M:%S UTC')
            
            üìä Data summary:
            - Total offers: $(wc -l < data/travel_prices.csv || echo '0')
            - Unique hotels: $(cut -d',' -f1 data/travel_prices.csv | tail -n +2 | sort -u | wc -l || echo '0')
            - Price range: $(cut -d',' -f2 data/travel_prices.csv | tail -n +2 | sort -n | head -1 || echo 'N/A') - $(cut -d',' -f2 data/travel_prices.csv | tail -n +2 | sort -n | tail -1 || echo 'N/A') PLN
            - Alerts: ${{ steps.alerts.outputs.alert_count }}
            
            ü§ñ Automated by GitHub Actions"
            
            git commit -m "$COMMIT_MSG"
            git push origin HEAD:main
            echo "‚úÖ Changes committed and pushed"
          fi

      - name: Create summary
        if: always()
        run: |
          echo "## üè® Travel Price Monitor Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "data/travel_prices.csv" ]; then
            TOTAL_OFFERS=$(wc -l < data/travel_prices.csv)
            UNIQUE_HOTELS=$(cut -d',' -f1 data/travel_prices.csv | tail -n +2 | sort -u | wc -l)
            MIN_PRICE=$(cut -d',' -f2 data/travel_prices.csv | tail -n +2 | sort -n | head -1)
            MAX_PRICE=$(cut -d',' -f2 data/travel_prices.csv | tail -n +2 | sort -n | tail -1)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫
            if [ -f "data/travel_prices.csv" ] && grep -q "offer_url" data/travel_prices.csv; then
              OFFERS_WITH_LINKS=$(python3 -c "import pandas as pd; import csv; df = pd.read_csv('data/travel_prices.csv', quoting=csv.QUOTE_ALL, on_bad_lines='skip'); print(len(df[df['offer_url'].notna() & (df['offer_url'] != '')]) if 'offer_url' in df.columns else 0)")
              LINK_PERCENTAGE=$(python3 -c "import pandas as pd; import csv; df = pd.read_csv('data/travel_prices.csv', quoting=csv.QUOTE_ALL, on_bad_lines='skip'); total = len(df); links = len(df[df['offer_url'].notna() & (df['offer_url'] != '')]) if 'offer_url' in df.columns else 0; print(f'{(links / total * 100):.1f}' if total > 0 else '0.0')")
            else
              OFFERS_WITH_LINKS="0"
              LINK_PERCENTAGE="0.0"
            fi
            
            echo "### üìà Data Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- **Total offers:** $TOTAL_OFFERS" >> $GITHUB_STEP_SUMMARY
            echo "- **Unique hotels:** $UNIQUE_HOTELS" >> $GITHUB_STEP_SUMMARY
            echo "- **Price range:** $MIN_PRICE - $MAX_PRICE PLN" >> $GITHUB_STEP_SUMMARY
            echo "- **Price alerts:** ${{ steps.alerts.outputs.alert_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Offers with links:** $OFFERS_WITH_LINKS ($LINK_PERCENTAGE%)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Landing](https://andreiYank.github.io/travel-monitoring/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Greece Dashboard](https://andreiYank.github.io/travel-monitoring/index_greece.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Egypt Dashboard](https://andreiYank.github.io/travel-monitoring/index_egypt.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [View Data](https://github.com/AndreiYank/travel-monitoring/tree/main/data)" >> $GITHUB_STEP_SUMMARY
          echo "- [View Logs](https://github.com/AndreiYank/travel-monitoring/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
