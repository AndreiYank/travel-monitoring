name: Deploy Dashboard to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dashboard.txt
          pip install streamlit-option-menu

      - name: Run data collection
        run: |
          python travel_monitor.py

      - name: Generate static dashboard
        run: |
          # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –¥–∞—à–±–æ—Ä–¥–∞
          python -c "
          import streamlit as st
          import pandas as pd
          import plotly.express as px
          import plotly.graph_objects as go
          from plotly.subplots import make_subplots
          import json
          from datetime import datetime, timedelta
          import os
          
          # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          df = pd.read_csv('data/travel_prices.csv')
          df['scraped_at'] = pd.to_datetime(df['scraped_at'])
          
          # –°–æ–∑–¥–∞–µ–º HTML –¥–∞—à–±–æ—Ä–¥
          html_content = f'''
          <!DOCTYPE html>
          <html>
          <head>
              <title>Travel Price Monitor Dashboard</title>
              <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>
              <style>
                  body {{ font-family: Arial, sans-serif; margin: 20px; }}
                  .metric {{ background: #f0f2f6; padding: 20px; margin: 10px; border-radius: 10px; display: inline-block; }}
                  .metric h3 {{ margin: 0; color: #1f77b4; }}
                  .metric p {{ margin: 5px 0; font-size: 24px; font-weight: bold; }}
                  .chart {{ margin: 20px 0; }}
                  table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                  th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                  th {{ background-color: #f2f2f2; }}
                  .price-drop {{ background-color: #d4edda; }}
                  .price-rise {{ background-color: #f8d7da; }}
              </style>
          </head>
          <body>
              <h1>‚úàÔ∏è Travel Price Monitor Dashboard</h1>
              <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
              
              <div class=\"metric\">
                  <h3>–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</h3>
                  <p>{len(df)}</p>
              </div>
              <div class=\"metric\">
                  <h3>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π</h3>
                  <p>{df['hotel_name'].nunique()}</p>
              </div>
              <div class=\"metric\">
                  <h3>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</h3>
                  <p>{df['price'].mean():.0f} PLN</p>
              </div>
              <div class=\"metric\">
                  <h3>–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω</h3>
                  <p>{df['price'].min():.0f} - {df['price'].max():.0f} PLN</p>
              </div>
              
              <h2>üìä –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π</h2>
              <table>
                  <tr><th>–û—Ç–µ–ª—å</th><th>–¶–µ–Ω–∞ (PLN)</th><th>–î–∞—Ç–∞ —Å–±–æ—Ä–∞</th></tr>
          '''
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π
          top_cheap = df.nsmallest(10, 'price')
          for _, row in top_cheap.iterrows():
              html_content += f'<tr><td>{row[\"hotel_name\"]}</td><td>{row[\"price\"]:.0f}</td><td>{row[\"scraped_at\"].strftime(\"%Y-%m-%d\")}</td></tr>'
          
          html_content += '''
              </table>
              
              <h2>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–µ–ª—è–º</h2>
              <table>
                  <tr><th>–û—Ç–µ–ª—å</th><th>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</th><th>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</th><th>–ú–∏–Ω —Ü–µ–Ω–∞</th><th>–ú–∞–∫—Å —Ü–µ–Ω–∞</th></tr>
          '''
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–µ–ª—è–º
          hotel_stats = df.groupby('hotel_name')['price'].agg(['count', 'mean', 'min', 'max']).round(2)
          hotel_stats = hotel_stats.sort_values('mean').head(20)
          for hotel, stats in hotel_stats.iterrows():
              html_content += f'<tr><td>{hotel}</td><td>{stats[\"count\"]}</td><td>{stats[\"mean\"]:.0f}</td><td>{stats[\"min\"]:.0f}</td><td>{stats[\"max\"]:.0f}</td></tr>'
          
          html_content += '''
              </table>
          </body>
          </html>
          '''
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
          with open('index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)
          "

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
